name: 'Server // Client Build & Release'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  release:
    if: contains(github.event.head_commit.message, 'release v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin
          - os: ubuntu-20.04
          - os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          path: Client

      # Install dependencies (Ubuntu only)
      - name: Install dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libappindicator3-dev librsvg2-dev patchelf cmake libopus-dev

      # Install dependencies (Ubuntu only) - WebKit
      - name: Install dependencies (Ubuntu only) - WebKit
        if: matrix.os == 'ubuntu-20.04'
        run: |
          # Insert new line to /etc/apt/sources.list
          echo "deb http://archive.ubuntu.com/ubuntu jammy main universe" | sudo tee -a /etc/apt/sources.list

          # Update and upgrade packages
          sudo apt-get update
          sudo apt-get upgrade -y

          # Install libwebkit2gtk-4.0-dev
          sudo apt-get install -y libwebkit2gtk-4.0-dev

          # Remove/comment out the inserted line
          sudo sed -i '/deb http:\/\/archive.ubuntu.com\/ubuntu jammy main universe/d' /etc/apt/sources.list

      # Install dependencies (macOS only)
      - name: install dependencies (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake opus

      # Install dependencies (Windows only)
      - name: install dependencies (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake asio4all
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm

      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: |
          npm install # Changed from yarn to npm.

      - uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: Discord2-v__VERSION__
          releaseName: 'Discord II v__VERSION__'
          releaseBody: 'See the assets to download this version and install.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.args }}
          bundleIdentifier: discord2
          distDir: "src-tauri/target/release"

  build-and-release-go:
    name: Build and Release Go Server
    if: contains(github.event.head_commit.message, 'release v')
    runs-on: ubuntu-latest

    steps:
      # Checkout only the /Server folder and ignore other parts of the repository
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          # Only fetch the 'Server' folder by specifying the path
          path: Server

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.3'

      - name: Initialize Go module in Server
        run: |
          cd Server
          go mod init discord-server || true
          go mod tidy

      - name: Build Go server
        run: |
          cd Server
          mkdir -p dist
          VERSION=$(echo "${{ github.event.head_commit.message }}" | grep -o 'v[0-9]*\.[0-9]*\.[0-9]*')
          go build -o "dist/Discord 2.0 Server ${VERSION}" main.go

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload build artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "Server/dist/Discord 2.0 Server ${VERSION}"
          asset_name: "Discord 2.0 Server ${VERSION}"
          asset_content_type: application/octet-stream