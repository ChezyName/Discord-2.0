name: 'Server // Client Build & Release'

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'
    paths-ignore:
      - 'Images/**'
env:
  AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
  AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  Client:
    defaults:
      run:
        working-directory: ./Client/
    if: contains(github.event.head_commit.message, 'release v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          #- os: macos-latest NOT WORKING
          #  target: x86_64-apple-darwin
          - os: ubuntu-24
          - os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      # Install dependencies (Ubuntu only)
      - name: Install Dependencies (ubuntu only)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libayatana-appindicator3-dev librsvg2-dev cmake
          sudo apt install libwebkit2gtk-4.1-dev libsoup3.0-dev

      # Install dependencies (macOS only)
      - name: Install Dependencies (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          brew install cmake opus automake
          rustup target add x86_64-apple-darwin

      # Install dependencies (Windows only)
      - name: Install Dependencies (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          choco install cmake asio4all

      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: npm
          cache-dependency-path: 'Client/package-lock.json'


      - name: install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: install frontend dependencies
        run: |
          npm install

      - name: Build app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: Discord2-v__VERSION__
          releaseName: 'Discord II v__VERSION__'
          releaseBody: 'See the assets to download and install this version.'
          releaseDraft: true
          prerelease: false
          args: ${{ matrix.target && format('--target {0}', matrix.target) }}

  Server:
    defaults:
      run:
        working-directory: ./Server
    name: Build and Release Go Server
    if: contains(github.event.head_commit.message, 'release v')
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            target: aarch64-apple-darwin
          #- os: macos-latest NOT WORKING
          #  target: x86_64-apple-darwin
          - os: ubuntu-24
          - os: windows-latest
    runs-on: ${{ matrix.os }}
    steps:
      # Checkout only the /Server folder and ignore other parts of the repository
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go environment
        uses: actions/setup-go@v4
        with:
          go-version: '1.23.3'

      - name: Initialize Go module in Server
        run: |
          go mod tidy

      # Install dependencies (Ubuntu only)
      - name: Build Server (ubuntu only)
        if: matrix.os == 'ubuntu-20.04'
        run: |
          go build -o "dist/Discord2_Server_${VERSION}_linux"

      # Install dependencies (macOS only)
      - name: Build Server (macOS only)
        if: matrix.os == 'macos-latest'
        run: |
          go build -o "dist/Discord2_Server_${VERSION}_mac"

      # Install dependencies (Windows only)
      - name: Build Server (Windows only)
        if: matrix.os == 'windows-latest'
        run: |
          go build -o "dist/Discord2_Server_${VERSION}_windows.exe"

      - name: Upload Built Server
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release upload "${{ github.ref_name }}" "dist/*" \

    
  
  publish:
    needs: [Client, Server]
    runs-on: ubuntu-latest
    steps:
    - name: Publish Release
      env:
        GH_TOKEN: ${{ github.token }}
        GH_REPO: ${{ github.repository }}
      run: gh release edit "${{ needs.release.outputs.tag }}" --draft=false
    - uses: eregon/keep-last-n-releases@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        n: 3
        remove_tags_without_release: true